/* 
 * File:   TransferMapping.cpp
 * Author: Adam
 * 
 * Created on November 5, 2012, 3:42 PM
 */

#include "TransferMapping.h"
#include <iostream>
#include <stdlib.h>
#include <sstream>

TransferMapping::TransferMapping()
{
        sourceSet = false;
        targetSet = false;
		wSourceSet=false;
		wTargetSet=false;
        sourceName = "";
        TargetName = "";
}

TransferMapping::~TransferMapping()
{
}

void TransferMapping::setTarget(QTable* target)
{
        this->target = target;
        targetSet = true;
}

QTable* TransferMapping::getTarget() const
{
        return target;
}

void TransferMapping::setSource(QTable* source)
{
        this->source = source;
        sourceSet = true;
}

QTable* TransferMapping::getSource() const
{
        return source;
}

void TransferMapping::setWTarget(WTable* wTarget)
{
        this->wTarget = wTarget;
        wTargetSet = true;
}

WTable* TransferMapping::getWTarget() const
{
        return wTarget;
}

void TransferMapping::setWSource(WTable* source)
{
        this->wSource = source;
        wSourceSet = true;
}

WTable* TransferMapping::getWSource() const
{
        return wSource;
}
bool TransferMapping::getWTargetSet()
{
        return wTargetSet;
}

void TransferMapping::setTargetName(std::string TargetName)
{
        this->TargetName = TargetName;
}

std::string TransferMapping::getTargetName() const
{
        return TargetName;
}

void TransferMapping::setSourceName(std::string sourceName)
{
        this->sourceName = sourceName;
}

std::string TransferMapping::getSourceName() const
{
        return sourceName;
}

bool TransferMapping::getSourceSet()
{
        return sourceSet;
}

/**
 * put the states into the mapping in any order
 */
void TransferMapping::populateMappingRandomly()
{
        bool bothFinished = false;
        bool sourceFinished = false;
        bool targetFinished = false;
        if (source != NULL && target != NULL)
        {//if something there
                //for all source's states make them a partner in target
                std::multimap<std::string, std::pair<std::string, double> >sourceStates = source->getQTable();
                std::multimap<std::string, std::pair<std::string, double> >targetStates = target->getQTable();
                std::multimap<std::string, std::pair<std::string, double> >::iterator sourceStatesIterator = sourceStates.begin();
                std::multimap<std::string, std::pair<std::string, double> >::iterator targetStatesIterator = targetStates.begin();
                while (!bothFinished)
                {//while some left


                        std::pair<std::string, std::pair<std::string, double> > toAdd;
                        std::stringstream ss;
                        ss << (*sourceStatesIterator).first << ":" << (*sourceStatesIterator).second.first; //make state+action
                        toAdd.first = ss.str(); //add source
                        std::stringstream ss1;
                        ss1 << (*targetStatesIterator).first << ":" << (*targetStatesIterator).second.first; //make state+action
                        toAdd.second.first = ss1.str(); //add target
                        toAdd.second.second = 1; //add weighting
                        mapping.insert(toAdd);
                        targetStatesIterator++;
                        sourceStatesIterator++;

                        //see if ended
                        if (sourceStatesIterator == sourceStates.end())
                        {//if one finished
                                if (targetFinished)
                                {//if target already done
                                        bothFinished = true;
                                }
                                else
                                {
                                        sourceStatesIterator = sourceStates.begin(); //reset it
                                        sourceFinished = true;
                                }
                        }
                        if (targetStatesIterator == targetStates.end())
                        {//if one finished
                                if (sourceFinished)
                                {//if source already done
                                        bothFinished = true;
                                }
                                else
                                {
                                        targetStatesIterator = targetStates.begin(); //reset it
                                        targetFinished = true;
                                }
                        }
                }
                sourceStates.clear(); //clean up
                targetStates.clear();
        }
        else
        {
                std::cerr << "TransferMapping trying to map a null thing\r\n";
                exit(85);
        }

}

/**
 * put the states into the mapping in any order
 */
void TransferMapping::populateMappingBySearch()
{
        bool bothFinished = false;
        bool sourceFinished = false;
        bool targetFinished = false;

        if (source != NULL && target != NULL)
        {//if something there			
                //for all source's states make them a partner in target
                std::multimap<std::string, std::pair<std::string, double> >sourceStates = source->getQTable();
                std::multimap<std::string, std::pair<std::string, double> >targetStates = target->getQTable();
                std::multimap<std::string, std::pair<std::string, double> >::iterator sourceStatesIterator = sourceStates.begin();

                while (!bothFinished)
                {//while some left


                        std::pair<std::string, std::pair<std::string, double> > toAdd;
                        std::stringstream ss;
                        ss << (*sourceStatesIterator).first << ":" << (*sourceStatesIterator).second.first; //make state+action
                        toAdd.first = ss.str(); //add source

                        if (targetStates.find((*sourceStatesIterator).first) != targetStates.end())
                        {//if state match get all matches
                                std::pair<std::multimap<std::string, std::pair<std::string, double> >::iterator, std::multimap<std::string, std::pair<std::string, double> >::iterator > targetStatesIterator = targetStates.equal_range((*sourceStatesIterator).first);
                                while (targetStatesIterator.first != targetStatesIterator.second)
                                {//for all possible correct states and actions
                                        if ((*targetStatesIterator.first).second.first == (*sourceStatesIterator).second.first)
                                        {//if actions match
                                                std::stringstream ss1;
                                                ss1 << (*targetStates.find((*sourceStatesIterator).first)).first << ":" << (*targetStatesIterator.first).second.first; //make state+action
                                                toAdd.second.first = ss1.str(); //add target
                                                toAdd.second.second = 1; //add weighting
                                                targetStatesIterator.first = targetStatesIterator.second; //end loop
                                               //std::cerr<<toAdd.second.first <<" matched  "<<toAdd.first<<"\n";
                                        }
                                        else
                                        {
                                                targetStatesIterator.first++;
                                        }
                                }

                        }
                        else
                        {
                                toAdd.second.first = "NO MATCH"; //add target
                                toAdd.second.second = 1; //add weighting
                        }
                        mapping.insert(toAdd);
                        //targetStatesIterator++;
                        sourceStatesIterator++;
                        //see if ended
                        if (sourceStatesIterator == sourceStates.end())
                        {//if one finished
                                if (targetFinished)
                                {//if target already done
                                        bothFinished = true;
                                }
                                else
                                {
                                        sourceStatesIterator = sourceStates.begin(); //reset it
                                        sourceFinished = true;
                                        bothFinished = true; //add this so only this one needs to finish
                                }
                        }

                }
                sourceStates.clear(); //clean up
                targetStates.clear();
        }
        else
        {
                std::cerr << "TransferMapping trying to map a null thing\r\n";
                exit(85);
        }

}

/**
 * put the states into the mapping in any order
 */
void TransferMapping::populateWMappingBySearch()
{//std::cerr<<"trying to map ws\n";
        bool bothFinished = false;
        bool sourceFinished = false;
        bool targetFinished = false;

        if (source != NULL && target != NULL)
        {//if something there			
                //for all source's states make them a partner in target
                std::map<std::string,  double> sourceStates = wSource->getWTable();
                std::map<std::string,  double> targetStates = wTarget->getWTable();
                std::map<std::string,  double> ::iterator sourceStatesIterator = sourceStates.begin();

                while (!bothFinished)
                {//while some left


                       std::pair<std::string, std::pair<std::string, double> >  toAdd;
                        std::stringstream ss;
                        ss << (*sourceStatesIterator).first ; //make state
                        toAdd.first = ss.str(); //add source

                        if (targetStates.find((*sourceStatesIterator).first) != targetStates.end())
                        {//if state match get all matches
							std::pair<std::map<std::string, double> ::iterator, std::map<std::string, double> ::iterator > targetStatesIterator = targetStates.equal_range((*sourceStatesIterator).first);
                                while (targetStatesIterator.first != targetStatesIterator.second)
                                {//for all possible correct states and actions
                                        if ((*targetStatesIterator.first).first == (*sourceStatesIterator).first)
                                        {//if actions match
                                                std::stringstream ss1;
                                                ss1 << (*targetStates.find((*sourceStatesIterator).first)).first ; //make state
												toAdd.second.first = ss1.str(); //add target
												toAdd.second.second = 1; //add weighting
                                                targetStatesIterator.first = targetStatesIterator.second; //end loop
                                               //std::cerr<<toAdd.second.first <<" matched  "<<toAdd.first<<"\n";
                                        }
                                        else
                                        {
                                                targetStatesIterator.first++;
                                        }
                                }

                        }
                        else
                        {
							toAdd.second.first = "NO MATCH"; //add target
							toAdd.second.second = 1; //add weighting
                        }
                        mapping.insert(toAdd);
                        //targetStatesIterator++;
                        sourceStatesIterator++;
                        //see if ended
                        if (sourceStatesIterator == sourceStates.end())
                        {//if one finished
                                if (targetFinished)
                                {//if target already done
                                        bothFinished = true;
                                }
                                else
                                {
                                        sourceStatesIterator = sourceStates.begin(); //reset it
                                        sourceFinished = true;
                                        bothFinished = true; //add this so only this one needs to finish
                                }
                        }

                }
                sourceStates.clear(); //clean up
                targetStates.clear();
        }
        else
        {
                std::cerr << "TransferMapping trying to map a null thing\r\n";
                exit(85);
        }

}

/**
 * take a q table state action pair and fit it into the mapping framework
 * @param input a qtable's pair state action value
 * @return state+action value
 */
std::pair<std::string, double> TransferMapping::makePairForMapper(std::pair<std::string, std::pair<std::string, double> > input)
{
        std::pair<std::string, double> output;
        std::stringstream ss;
        ss << input.first << ":" << input.second.first; //make state+action
        output.first = ss.str(); //add it
        output.second = input.second.second; //put in the q
        return output;
}

/**
 * take a q table state action pair and fit it into the mapping framework
 * @param input a qtable's pair state action value
 * @return state+action value
 */
std::vector<std::pair<std::string, double> > TransferMapping::makePairForMapper(std::vector<std::pair<std::string, std::pair<std::string, double> > > input)
{//std::cerr << "make pair for mapper\r\n";
        std::vector<std::pair<std::string, double> >output;
        std::vector<std::pair<std::string, std::pair<std::string, double> > >::iterator inputIterator = input.begin();
        while (inputIterator != input.end())
        {
                std::pair<std::string, double> toAdd;
                std::stringstream ss;
                ss << (*inputIterator).first << ":" << (*inputIterator).second.first; //make state+action
                toAdd.first = ss.str(); //add it
                toAdd.second = (*inputIterator).second.second; //put in the q
                output.push_back(toAdd);
                inputIterator++;
        }
        //std::cerr << "make pair for mapper end\r\n";
        return output;
}


/**
 * map the passed pair from source to target 
 * @param input the state action and its q value
 * @return the q value pair to add to target
 */
std::pair<std::string, std::pair<std::string, double> > TransferMapping::mapFromStateToTarget(std::pair<std::string, double> input)
{//std::cerr<<"about to map pair"<<" \n";
        std::pair<std::string, std::pair<std::string, double> > output;
        if ((mapping.find(input.first)) != mapping.end())
        {
                std::pair<std::string, double> targetState = (*(mapping.find(input.first))).second; //(*(mapping.find(input.first)));//get where this state should be
                std::string action = targetState.first;
                std::string state = action.replace(action.find(":"), (action.length() - 1), ""); //trim off action;
                action = targetState.first;
                action = action.substr(action.find(":") + 1, action.length() - 1);
                output.first = state;
                output.second.first = action;
                output.second.second = targetState.second * input.second; //weighting *q
        }
        else
        {
                std::cerr << "couldn't find the thing( " << input.first << " ) to map\r\n";
                exit(47892);
        }
        //std::cerr<<"Mapped from "<<input.first<<" to "<<output.first<<"\n";
        return output;
}

/**
 * map the passed w pair from source to target 
 * @param input the state action and its w value
 * @return the q value pair to add to target
 */
std::pair<std::string, double>  TransferMapping::mapWFromStateToTarget(std::pair<std::string, double> input)
{//std::cerr<<"about to map w"<<" \n";
        std::pair<std::string, double>  output;
        if ((mapping.find(input.first)) != mapping.end())
        {
                std::pair<std::string, double> targetState = (*(mapping.find(input.first))).second; //(*(mapping.find(input.first)));//get where this state should be
                std::string state = targetState.first;
                output.first = state;
                output.second = targetState.second * input.second; //weighting *q
        }
        else
        {
                std::cerr << "w couldn't find the thing( " << input.first << " ) to map\r\n";
                exit(47892);
        }
        //std::cerr<<"Mapped w from "<<input.first<<" to "<<output.first<<"\n";
        return output;
}
/**
 * vector version map the passed pair from source to target 
 * @param input the state action and its q value
 * @return the q value pair to add to target
 */
std::vector<std::pair<std::string,  double>  > TransferMapping::mapWFromStateToTarget(std::vector<std::pair<std::string, double> >input)
{//std::cerr << "map from state to target\r\n";
        std::vector<std::pair<std::string,  double>  > output;
        std::vector<std::pair<std::string, double> >::iterator inputIterator = input.begin();
        while (inputIterator != input.end())
        {

                std::pair<std::string,  double>  temp = TransferMapping::mapWFromStateToTarget((*inputIterator));
                output.push_back(temp);
                inputIterator++;
        }

       // std::cerr << "ma from state to target end\r\n";
        return output;
}

/**
 * vector version map the passed pair from source to target 
 * @param input the state action and its q value
 * @return the q value pair to add to target
 */
std::vector<std::pair<std::string, std::pair<std::string, double> > > TransferMapping::mapFromStateToTarget(std::vector<std::pair<std::string, double> >input)
{//std::cerr << "map from state to target\r\n";
        std::vector<std::pair<std::string, std::pair<std::string, double> > > output;
        std::vector<std::pair<std::string, double> >::iterator inputIterator = input.begin();
        while (inputIterator != input.end())
        {

                std::pair<std::string, std::pair<std::string, double> > temp = TransferMapping::mapFromStateToTarget((*inputIterator));
                output.push_back(temp);
                inputIterator++;
        }

        //std::cerr << "ma from state to target end\r\n";
        return output;
}